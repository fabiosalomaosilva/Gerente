// <auto-generated />
using System;
using Gerente.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gerente.Infra.Data.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gerente.Domain.Entities.Aditivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataAditivo")
                        .HasColumnType("datetime2");

                    b.Property<int>("MesesAcrescidos")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Objeto")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("Aditivo");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Agendamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<bool>("Cancelado")
                        .HasColumnType("bit");

                    b.Property<bool>("Confirmado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("FilaProcedimentoId")
                        .HasColumnType("int");

                    b.Property<int>("HoraInicio")
                        .HasColumnType("int");

                    b.Property<int>("Membro")
                        .HasColumnType("int");

                    b.Property<string>("MensagemNotificacao")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NomePessoaConfirmacao")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Realizado")
                        .HasColumnType("bit");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FilaProcedimentoId");

                    b.ToTable("Agendamento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Auditoria", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("AuditadoEm")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditadoPor")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("IdObjeto")
                        .HasColumnType("int");

                    b.Property<string>("Operacao")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Tabela")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Valor")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Auditoria");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecretariaId")
                        .HasColumnType("int");

                    b.Property<int>("SetorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecretariaId");

                    b.HasIndex("SetorId");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Contrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataContrato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFinalVigencia")
                        .HasColumnType("datetime2");

                    b.Property<int>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<int>("ModalidadeLicitacao")
                        .HasColumnType("int");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NumeroLicitacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Objeto")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("RepresentanteId")
                        .HasColumnType("int");

                    b.Property<int>("SistemaLicitacao")
                        .HasColumnType("int");

                    b.Property<int>("TipoInstrumento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("RepresentanteId");

                    b.ToTable("Contrato");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AditivoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("ContratoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AditivoId");

                    b.HasIndex("ContratoId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Documento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Especialidade");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteradoEm = new DateTime(2021, 2, 24, 17, 49, 41, 585, DateTimeKind.Local).AddTicks(609),
                            AlteradoPor = "admin",
                            Ativo = true,
                            CriadoEm = new DateTime(2021, 2, 24, 17, 49, 41, 583, DateTimeKind.Local).AddTicks(8623),
                            CriadoPor = "admin",
                            Nome = "Acre",
                            Uf = "AC"
                        });
                });

            modelBuilder.Entity("Gerente.Domain.Entities.FilaProcedimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("bit");

                    b.Property<bool>("LadoDireito")
                        .HasColumnType("bit");

                    b.Property<bool>("LadoEsquerdo")
                        .HasColumnType("bit");

                    b.Property<int>("LocalProcedimentoId")
                        .HasColumnType("int");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("Prioridade")
                        .HasColumnType("int");

                    b.Property<int>("ProcedimentoId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("LocalProcedimentoId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProcedimentoId");

                    b.ToTable("FilaProcedimento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.LocalProcedimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cep")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MunicipioId");

                    b.ToTable("LocalProcedimento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LocalProcedimentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LocalProcedimentoId");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Municipio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Municipio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteradoEm = new DateTime(2021, 2, 24, 17, 49, 41, 598, DateTimeKind.Local).AddTicks(9908),
                            AlteradoPor = "admin",
                            Ativo = true,
                            CriadoEm = new DateTime(2021, 2, 24, 17, 49, 41, 598, DateTimeKind.Local).AddTicks(9881),
                            CriadoPor = "admin",
                            EstadoId = 1,
                            Nome = "Rio Branco"
                        });
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcompanhanteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CartaoFundhacre")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CartaoSus")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Cep")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ContratoId")
                        .HasColumnType("int");

                    b.Property<string>("Cpf")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Matricula")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<int>("NaturezaJuridica")
                        .HasColumnType("int");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NomeFantasia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RepresentanteId")
                        .HasColumnType("int");

                    b.Property<int>("SecretariaId")
                        .HasColumnType("int");

                    b.Property<int>("SetorId")
                        .HasColumnType("int");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcompanhanteId");

                    b.HasIndex("CartaoFundhacre")
                        .IsUnique()
                        .HasFilter("[CartaoFundhacre] IS NOT NULL");

                    b.HasIndex("CartaoSus")
                        .IsUnique()
                        .HasFilter("[CartaoSus] IS NOT NULL");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasFilter("[Cnpj] IS NOT NULL");

                    b.HasIndex("ContratoId");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasFilter("[Cpf] IS NOT NULL");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MunicipioId");

                    b.HasIndex("RepresentanteId");

                    b.HasIndex("SecretariaId");

                    b.HasIndex("SetorId");

                    b.ToTable("Pessoa");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Procedimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DoisMembros")
                        .HasColumnType("bit");

                    b.Property<int>("EspecialidadeId")
                        .HasColumnType("int");

                    b.Property<int>("NaturezaProcedimento")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TempoDuracao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.ToTable("Procedimento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Secretaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cep")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("MunicipioId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NomeSimplificado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Secretaria");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteradoEm = new DateTime(2021, 2, 24, 17, 49, 41, 618, DateTimeKind.Local).AddTicks(2428),
                            AlteradoPor = "admin",
                            Ativo = true,
                            Bairro = "Centro",
                            Cep = "69900000",
                            CriadoEm = new DateTime(2021, 2, 24, 17, 49, 41, 618, DateTimeKind.Local).AddTicks(2400),
                            CriadoPor = "admin",
                            EstadoId = 1,
                            Logradouro = "Rua Benjamim Constant",
                            MunicipioId = 1,
                            Nome = "Secretaria de Estado de Saúde do Acre",
                            NomeSimplificado = "SESACRE",
                            Numero = "81"
                        });
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Setor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SecretariaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SecretariaId");

                    b.ToTable("Setor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlteradoEm = new DateTime(2021, 2, 24, 17, 49, 41, 620, DateTimeKind.Local).AddTicks(8491),
                            AlteradoPor = "admin",
                            Ativo = true,
                            CriadoEm = new DateTime(2021, 2, 24, 17, 49, 41, 620, DateTimeKind.Local).AddTicks(8465),
                            CriadoPor = "admin",
                            Email = "gerenciacomplexo@gmail.com",
                            Nome = "Complexo Regulador Estadual",
                            SecretariaId = 1
                        });
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Telefone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AlteradoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("AlteradoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriadoPor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<string>("PessoaResponsavel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("SecretariaId")
                        .HasColumnType("int");

                    b.Property<int>("SetorId")
                        .HasColumnType("int");

                    b.Property<int>("TipoTelefone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.HasIndex("SecretariaId");

                    b.HasIndex("SetorId");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1b7761cf-d369-4264-bde0-7b58edab8492",
                            ConcurrencyStamp = "1254e3f4-357e-4711-8917-a5cd4f35fd2c",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Aditivos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Agendamentos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Auditorias",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Cargos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Contratos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Documentos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Especialidades",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Estados",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "FilaProcedimentos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "LocalProcedimentos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Medicos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Municipios",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Pessoas",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Procedimentos",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Secretarias",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Setores",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Telefones",
                            ClaimValue = "1,1,1,1",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "fa6600a9-36f2-4aff-a14e-bf270b9da727",
                            RoleId = "1b7761cf-d369-4264-bde0-7b58edab8492"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gerente.Infra.Data.Models.Usuario", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FotoExtensao")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Secretaria")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SecretariaId")
                        .HasColumnType("int");

                    b.Property<string>("Setor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SetorId")
                        .HasColumnType("int");

                    b.Property<string>("Sexo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasDiscriminator().HasValue("Usuario");

                    b.HasData(
                        new
                        {
                            Id = "fa6600a9-36f2-4aff-a14e-bf270b9da727",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4652d688-a8b0-4213-969f-f53695f9e221",
                            Email = "fabio@arquivarnet.com.br",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FABIO@ARQUIVARNET.COM.BR",
                            NormalizedUserName = "FABIO@ARQUIVARNET.COM.BR",
                            PasswordHash = "AQAAAAEAACcQAAAAEJtJ1DFQlygHGLaphf+T7DoVraW1rdLOa+KBXI7HEz4u1sKosmfXkgN7AFuozWIwbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "127fa936-cdb7-45cc-8d0b-6a2023ffbb71",
                            TwoFactorEnabled = false,
                            UserName = "fabio@arquivarnet.com.br",
                            Cpf = "65788974291",
                            DataNascimento = new DateTime(1981, 2, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://fundhacre.blob.core.windows.net/avatar/masculino01.png",
                            FotoExtensao = ".png",
                            Matricula = "123456",
                            NomeCompleto = "Fábio Salomão Silva Vogth",
                            Secretaria = "Secretaria de Estado de Saúde",
                            SecretariaId = 1,
                            Setor = "Complexo Regulador Estadual",
                            SetorId = 1,
                            Sexo = "Indefinido"
                        });
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Aditivo", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Contrato", "Contrato")
                        .WithMany("Aditivos")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contrato");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Agendamento", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.FilaProcedimento", "FilaProcedimento")
                        .WithMany("Agendamentos")
                        .HasForeignKey("FilaProcedimentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FilaProcedimento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Cargo", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Secretaria", "Secretaria")
                        .WithMany("Cargos")
                        .HasForeignKey("SecretariaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Setor", "Setor")
                        .WithMany("Cargos")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Secretaria");

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Contrato", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Pessoa", "Fornecedor")
                        .WithMany("ContratosFornecedores")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Pessoa", "Representante")
                        .WithMany("ContratosRepresentantes")
                        .HasForeignKey("RepresentanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Representante");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Documento", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Aditivo", "Aditivo")
                        .WithMany("Documentos")
                        .HasForeignKey("AditivoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Contrato", "Contrato")
                        .WithMany("Documentos")
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Documentos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Aditivo");

                    b.Navigation("Contrato");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.FilaProcedimento", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany("FilaProcedimentos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.LocalProcedimento", "LocalProcedimento")
                        .WithMany("FilaProcedimentos")
                        .HasForeignKey("LocalProcedimentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Medico", "Medico")
                        .WithMany("FilaProcedimentos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Pessoa", "Paciente")
                        .WithMany("FilaProcedimentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Procedimento", "Procedimento")
                        .WithMany("FilaProcedimentos")
                        .HasForeignKey("ProcedimentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("LocalProcedimento");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Procedimento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.LocalProcedimento", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Estado", "Estado")
                        .WithMany("LocalProcedimentos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Municipio", "Municipio")
                        .WithMany("LocalProcedimentos")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Medico", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.LocalProcedimento", "LocalProcedimento")
                        .WithMany("Medicos")
                        .HasForeignKey("LocalProcedimentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LocalProcedimento");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Municipio", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Estado", "Estado")
                        .WithMany("Municipios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Pessoa", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Pessoa", "Acompanhante")
                        .WithMany("Acompanhantes")
                        .HasForeignKey("AcompanhanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Contrato", null)
                        .WithMany("Representantes")
                        .HasForeignKey("ContratoId");

                    b.HasOne("Gerente.Domain.Entities.Estado", "Estado")
                        .WithMany("Pessoas")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Municipio", "Municipio")
                        .WithMany("Pessoas")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Pessoa", "Representante")
                        .WithMany("Representantes")
                        .HasForeignKey("RepresentanteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Secretaria", "Secretaria")
                        .WithMany("Servidores")
                        .HasForeignKey("SecretariaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Setor", "Setor")
                        .WithMany("Servidores")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Acompanhante");

                    b.Navigation("Estado");

                    b.Navigation("Municipio");

                    b.Navigation("Representante");

                    b.Navigation("Secretaria");

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Procedimento", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany("Procedimentos")
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Especialidade");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Secretaria", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Estado", "Estado")
                        .WithMany("Secretarias")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Municipio", "Municipio")
                        .WithMany("Secretarias")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Municipio");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Setor", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Secretaria", "Secretaria")
                        .WithMany("Setores")
                        .HasForeignKey("SecretariaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Secretaria");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Telefone", b =>
                {
                    b.HasOne("Gerente.Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Telefones")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Secretaria", "Secretaria")
                        .WithMany("Telefones")
                        .HasForeignKey("SecretariaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gerente.Domain.Entities.Setor", "Setor")
                        .WithMany("Telefones")
                        .HasForeignKey("SetorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pessoa");

                    b.Navigation("Secretaria");

                    b.Navigation("Setor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Aditivo", b =>
                {
                    b.Navigation("Documentos");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Contrato", b =>
                {
                    b.Navigation("Aditivos");

                    b.Navigation("Documentos");

                    b.Navigation("Representantes");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Especialidade", b =>
                {
                    b.Navigation("FilaProcedimentos");

                    b.Navigation("Procedimentos");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Estado", b =>
                {
                    b.Navigation("LocalProcedimentos");

                    b.Navigation("Municipios");

                    b.Navigation("Pessoas");

                    b.Navigation("Secretarias");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.FilaProcedimento", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.LocalProcedimento", b =>
                {
                    b.Navigation("FilaProcedimentos");

                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Medico", b =>
                {
                    b.Navigation("FilaProcedimentos");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Municipio", b =>
                {
                    b.Navigation("LocalProcedimentos");

                    b.Navigation("Pessoas");

                    b.Navigation("Secretarias");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Pessoa", b =>
                {
                    b.Navigation("Acompanhantes");

                    b.Navigation("ContratosFornecedores");

                    b.Navigation("ContratosRepresentantes");

                    b.Navigation("Documentos");

                    b.Navigation("FilaProcedimentos");

                    b.Navigation("Representantes");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Procedimento", b =>
                {
                    b.Navigation("FilaProcedimentos");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Secretaria", b =>
                {
                    b.Navigation("Cargos");

                    b.Navigation("Servidores");

                    b.Navigation("Setores");

                    b.Navigation("Telefones");
                });

            modelBuilder.Entity("Gerente.Domain.Entities.Setor", b =>
                {
                    b.Navigation("Cargos");

                    b.Navigation("Servidores");

                    b.Navigation("Telefones");
                });
#pragma warning restore 612, 618
        }
    }
}
